--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.2.8) ~  Much Love, Ferib 

]]--

do
	local v0 = string.char;
	local v1 = string.byte;
	local v2 = string.sub;
	local v3 = bit32 or bit;
	local v4 = v3.bxor;
	local v5 = table.concat;
	local v6 = table.insert;
	local function v7(v24, v25)
		local v26 = 0;
		local v27;
		while true do
			if (v26 == 1) then
				return v5(v27);
			end
			if (v26 == 0) then
				v27 = {};
				for v43 = 1, #v24 do
					v6(v27, v0(v4(v1(v2(v24, v43, v43 + 1)), v1(v2(v25, 1 + ((v43 - 1) % #v25), 1 + ((v43 - 1) % #v25) + 1))) % 256));
				end
				v26 = 1;
			end
		end
	end
	local v8 = tonumber;
	local v9 = string.byte;
	local v10 = string.char;
	local v11 = string.sub;
	local v12 = string.gsub;
	local v13 = string.rep;
	local v14 = table.concat;
	local v15 = table.insert;
	local v16 = math.ldexp;
	local v17 = getfenv or function()
		return _ENV;
	end;
	local v18 = setmetatable;
	local v19 = pcall;
	local v20 = select;
	local v21 = unpack or table.unpack;
	local v22 = tonumber;
	local function v23(v28, v29, ...)
		local v30 = 0;
		local v31;
		local v32;
		local v33;
		local v34;
		local v35;
		local v36;
		local v37;
		local v38;
		local v39;
		local v40;
		local v41;
		local v42;
		while true do
			if (v30 == 3) then
				function v37()
					local v44 = 0;
					local v45;
					local v46;
					local v47;
					local v48;
					local v49;
					local v50;
					local v51;
					while true do
						if (v44 == 2) then
							v49 = nil;
							v50 = nil;
							v44 = 3;
						end
						if (v44 == 0) then
							v45 = 0;
							v46 = nil;
							v44 = 1;
						end
						if (v44 == 1) then
							v47 = nil;
							v48 = nil;
							v44 = 2;
						end
						if (v44 == 3) then
							v51 = nil;
							while true do
								local v100 = 0;
								while true do
									if (0 == v100) then
										if (v45 == 1) then
											local v133 = 0;
											while true do
												if (v133 == 0) then
													v48 = 1;
													v49 = (v33(v47, 1, 20) * (2 ^ 32)) + v46;
													v133 = 1;
												end
												if (v133 == 1) then
													v45 = 2;
													break;
												end
											end
										end
										if (2 == v45) then
											local v134 = 0;
											while true do
												if (v134 == 1) then
													v45 = 3;
													break;
												end
												if (v134 == 0) then
													v50 = v33(v47, 21, 31);
													v51 = ((v33(v47, 32) == 1) and -(3 - 2)) or (1748 - (760 + 987));
													v134 = 1;
												end
											end
										end
										v100 = 1;
									end
									if (v100 == 1) then
										if (v45 == 0) then
											local v135 = 0;
											while true do
												if (1 == v135) then
													v45 = 1;
													break;
												end
												if (v135 == 0) then
													v46 = v36();
													v47 = v36();
													v135 = 1;
												end
											end
										end
										if (3 == v45) then
											local v136 = 0;
											while true do
												if (0 == v136) then
													if (v50 == (0 - 0)) then
														if (v49 == 0) then
															return v51 * 0;
														else
															local v157 = 0;
															local v158;
															while true do
																if (v157 == 0) then
																	v158 = 0;
																	while true do
																		if (v158 == 0) then
																			v50 = 1;
																			v48 = 1913 - (1789 + 124);
																			break;
																		end
																	end
																	break;
																end
															end
														end
													elseif (v50 == 2047) then
														return ((v49 == 0) and (v51 * ((767 - (745 + 21)) / 0))) or (v51 * NaN);
													end
													return v16(v51, v50 - 1023) * (v48 + (v49 / (2 ^ (99 - 47))));
												end
											end
										end
										break;
									end
								end
							end
							break;
						end
					end
				end
				v38 = nil;
				function v38(v52)
					local v53 = 0;
					local v54;
					local v55;
					local v56;
					while true do
						if (0 == v53) then
							v54 = 0;
							v55 = nil;
							v53 = 1;
						end
						if (v53 == 1) then
							v56 = nil;
							while true do
								local v101 = 0;
								while true do
									if (v101 == 1) then
										if (v54 == 3) then
											return v14(v56);
										end
										if (2 == v54) then
											local v137 = 0;
											while true do
												if (v137 == 0) then
													v56 = {};
													for v154 = 1, #v55 do
														v56[v154] = v10(v9(v11(v55, v154, v154)));
													end
													v137 = 1;
												end
												if (v137 == 1) then
													v54 = 3;
													break;
												end
											end
										end
										break;
									end
									if (v101 == 0) then
										if (v54 == 1) then
											local v138 = 0;
											while true do
												if (v138 == 0) then
													v55 = v11(v28, v31, (v31 + v52) - 1);
													v31 = v31 + v52;
													v138 = 1;
												end
												if (v138 == 1) then
													v54 = 2;
													break;
												end
											end
										end
										if (v54 == 0) then
											local v139 = 0;
											while true do
												if (v139 == 1) then
													v54 = 1;
													break;
												end
												if (v139 == 0) then
													v55 = nil;
													if not v52 then
														local v156 = 0;
														while true do
															if (v156 == 0) then
																v52 = v36();
																if (v52 == (0 - 0)) then
																	return "";
																end
																break;
															end
														end
													end
													v139 = 1;
												end
											end
										end
										v101 = 1;
									end
								end
							end
							break;
						end
					end
				end
				v39 = v36;
				v30 = 4;
			end
			if (v30 == 4) then
				v40 = nil;
				function v40(...)
					return {...}, v20("#", ...);
				end
				v41 = nil;
				function v41()
					local v57 = 0;
					local v58;
					local v59;
					local v60;
					local v61;
					local v62;
					local v63;
					while true do
						if (v57 == 0) then
							v58 = {};
							v59 = {};
							v60 = {};
							v61 = {v58,v59,nil,v60};
							v57 = 1;
						end
						if (1 == v57) then
							v62 = v36();
							v63 = {};
							for v102 = 1 + 0, v62 do
								local v103 = 0;
								local v104;
								local v105;
								while true do
									if (v103 == 0) then
										v104 = v34();
										v105 = nil;
										v103 = 1;
									end
									if (v103 == 1) then
										if (v104 == 1) then
											v105 = v34() ~= (0 - 0);
										elseif (v104 == 2) then
											v105 = v37();
										elseif (v104 == 3) then
											v105 = v38();
										end
										v63[v102] = v105;
										break;
									end
								end
							end
							v61[3] = v34();
							v57 = 2;
						end
						if (v57 == 2) then
							for v106 = 1, v36() do
								local v107 = 0;
								local v108;
								local v109;
								while true do
									if (v107 == 1) then
										while true do
											if (v108 == 0) then
												v109 = v34();
												if (v33(v109, 1, 932 - (857 + 74)) == 0) then
													local v149 = 0;
													local v150;
													local v151;
													local v152;
													local v153;
													while true do
														if (v149 == 0) then
															v150 = 0;
															v151 = nil;
															v149 = 1;
														end
														if (v149 == 2) then
															while true do
																if (v150 == 1) then
																	local v159 = 0;
																	while true do
																		if (v159 == 1) then
																			v150 = 2;
																			break;
																		end
																		if (v159 == 0) then
																			v153 = {v35(),v35(),nil,nil};
																			if (v151 == 0) then
																				local v165 = 0;
																				local v166;
																				while true do
																					if (v165 == 0) then
																						v166 = 0;
																						while true do
																							if (v166 == 0) then
																								v153[3] = v35();
																								v153[4] = v35();
																								break;
																							end
																						end
																						break;
																					end
																				end
																			elseif (v151 == 1) then
																				v153[3] = v36();
																			elseif (v151 == 2) then
																				v153[3] = v36() - (2 ^ 16);
																			elseif (v151 == 3) then
																				local v497 = 0;
																				local v498;
																				while true do
																					if (v497 == 0) then
																						v498 = 0;
																						while true do
																							if (v498 == 0) then
																								v153[3] = v36() - (2 ^ 16);
																								v153[15 - 11] = v35();
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			v159 = 1;
																		end
																	end
																end
																if (3 == v150) then
																	if (v33(v152, 3, 3) == 1) then
																		v153[4] = v63[v153[4]];
																	end
																	v58[v106] = v153;
																	break;
																end
																if (v150 == 2) then
																	local v161 = 0;
																	while true do
																		if (v161 == 0) then
																			if (v33(v152, 1, 1) == 1) then
																				v153[2] = v63[v153[2]];
																			end
																			if (v33(v152, 2, 1 + 1) == 1) then
																				v153[3] = v63[v153[571 - (367 + 201)]];
																			end
																			v161 = 1;
																		end
																		if (v161 == 1) then
																			v150 = 3;
																			break;
																		end
																	end
																end
																if (0 == v150) then
																	local v162 = 0;
																	while true do
																		if (v162 == 1) then
																			v150 = 1;
																			break;
																		end
																		if (v162 == 0) then
																			v151 = v33(v109, 2, 3);
																			v152 = v33(v109, 4, 6);
																			v162 = 1;
																		end
																	end
																end
															end
															break;
														end
														if (v149 == 1) then
															v152 = nil;
															v153 = nil;
															v149 = 2;
														end
													end
												end
												break;
											end
										end
										break;
									end
									if (0 == v107) then
										v108 = 0;
										v109 = nil;
										v107 = 1;
									end
								end
							end
							for v110 = 1, v36() do
								v59[v110 - 1] = v41();
							end
							return v61;
						end
					end
				end
				v30 = 5;
			end
			if (v30 == 1) then
				function v33(v64, v65, v66)
					if v66 then
						local v86 = 0;
						local v87;
						local v88;
						while true do
							if (1 == v86) then
								while true do
									if (v87 == 0) then
										local v129 = 0;
										while true do
											if (v129 == 0) then
												v88 = (v64 / ((1082 - (1020 + 60)) ^ (v65 - (1424 - (630 + 793))))) % (2 ^ (((v66 - 1) - (v65 - (3 - 2))) + (4 - 3)));
												return v88 - (v88 % 1);
											end
										end
									end
								end
								break;
							end
							if (v86 == 0) then
								v87 = 0;
								v88 = nil;
								v86 = 1;
							end
						end
					else
						local v89 = 0;
						local v90;
						local v91;
						while true do
							if (v89 == 0) then
								v90 = 0;
								v91 = nil;
								v89 = 1;
							end
							if (v89 == 1) then
								while true do
									if (0 == v90) then
										local v130 = 0;
										while true do
											if (v130 == 0) then
												v91 = (1 + 1) ^ (v65 - 1);
												return (((v64 % (v91 + v91)) >= v91) and 1) or 0;
											end
										end
									end
								end
								break;
							end
						end
					end
				end
				v34 = nil;
				function v34()
					local v67 = 0;
					local v68;
					local v69;
					while true do
						if (v67 == 1) then
							while true do
								local v112 = 0;
								while true do
									if (v112 == 0) then
										if (v68 == 0) then
											local v140 = 0;
											while true do
												if (v140 == 1) then
													v68 = 1;
													break;
												end
												if (v140 == 0) then
													v69 = v9(v28, v31, v31);
													v31 = v31 + 1;
													v140 = 1;
												end
											end
										end
										if (v68 == 1) then
											return v69;
										end
										break;
									end
								end
							end
							break;
						end
						if (v67 == 0) then
							v68 = 0;
							v69 = nil;
							v67 = 1;
						end
					end
				end
				v35 = nil;
				v30 = 2;
			end
			if (v30 == 5) then
				v42 = nil;
				function v42(v70, v71, v72)
					local v73 = 0;
					local v74;
					local v75;
					local v76;
					while true do
						if (1 == v73) then
							v76 = v70[3];
							return function(...)
								local v113 = 0;
								local v114;
								local v115;
								local v116;
								local v117;
								local v118;
								local v119;
								local v120;
								local v121;
								local v122;
								local v123;
								local v124;
								local v125;
								local v126;
								local v127;
								while true do
									if (v113 == 2) then
										v122 = v20("#", ...) - 1;
										v123 = {};
										v124 = {};
										for v131 = 0, v122 do
											if (v131 >= v116) then
												v120[v131 - v116] = v121[v131 + 1];
											else
												v124[v131] = v121[v131 + 1 + 0];
											end
										end
										v113 = 3;
									end
									if (v113 == 1) then
										v118 = 1;
										v119 = -1;
										v120 = {};
										v121 = {...};
										v113 = 2;
									end
									if (v113 == 0) then
										v114 = v74;
										v115 = v75;
										v116 = v76;
										v117 = v40;
										v113 = 1;
									end
									if (v113 == 3) then
										v125 = (v122 - v116) + 1;
										v126 = nil;
										v127 = nil;
										while true do
											local v132 = 0;
											while true do
												if (v132 == 0) then
													v126 = v114[v118];
													v127 = v126[1];
													v132 = 1;
												end
												if (v132 == 1) then
													if (v127 <= 57) then
														if (v127 <= (955 - (214 + 713))) then
															if (v127 <= 13) then
																if (v127 <= (1061 - (87 + 968))) then
																	if (v127 <= 2) then
																		if (v127 <= 0) then
																			if (v124[v126[2]] == v126[4]) then
																				v118 = v118 + 1;
																			else
																				v118 = v126[1 + 2];
																			end
																		elseif (v127 == 1) then
																			v72[v126[3]] = v124[v126[2]];
																		else
																			v124[v126[2]] = v124[v126[3]][v126[4]];
																		end
																	elseif (v127 <= 4) then
																		if (v127 == 3) then
																			for v430 = v126[1 + 1], v126[880 - (282 + 595)] do
																				v124[v430] = nil;
																			end
																		else
																			local v195 = 0;
																			local v196;
																			local v197;
																			local v198;
																			local v199;
																			local v200;
																			while true do
																				if (v195 == 1) then
																					v198 = v196 + 2;
																					v199 = {v124[v196](v124[v196 + 1], v124[v198])};
																					v195 = 2;
																				end
																				if (v195 == 3) then
																					if v200 then
																						local v538 = 0;
																						while true do
																							if (v538 == 0) then
																								v124[v198] = v200;
																								v118 = v126[3];
																								break;
																							end
																						end
																					else
																						v118 = v118 + (4 - 3);
																					end
																					break;
																				end
																				if (v195 == 0) then
																					v196 = v126[2];
																					v197 = v126[4];
																					v195 = 1;
																				end
																				if (2 == v195) then
																					for v499 = 1, v197 do
																						v124[v198 + v499] = v199[v499];
																					end
																					v200 = v199[1];
																					v195 = 3;
																				end
																			end
																		end
																	elseif (v127 == 5) then
																		local v201 = 0;
																		local v202;
																		while true do
																			if (v201 == 0) then
																				v202 = v126[2];
																				do
																					return v21(v124, v202, v202 + v126[3]);
																				end
																				break;
																			end
																		end
																	else
																		v124[v126[2]] = v42(v115[v126[3]], nil, v72);
																	end
																elseif (v127 <= 9) then
																	if (v127 <= (7 + 0)) then
																		local v171 = 0;
																		local v172;
																		local v173;
																		local v174;
																		local v175;
																		while true do
																			if (v171 == 2) then
																				for v436 = v172, v119 do
																					local v437 = 0;
																					local v438;
																					while true do
																						if (0 == v437) then
																							v438 = 0;
																							while true do
																								if (v438 == 0) then
																									v175 = v175 + 1;
																									v124[v436] = v173[v175];
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				break;
																			end
																			if (v171 == 0) then
																				v172 = v126[2];
																				v173, v174 = v117(v124[v172](v124[v172 + 1]));
																				v171 = 1;
																			end
																			if (v171 == 1) then
																				v119 = (v174 + v172) - 1;
																				v175 = 0 - 0;
																				v171 = 2;
																			end
																		end
																	elseif (v127 == 8) then
																		local v204 = 0;
																		local v205;
																		local v206;
																		while true do
																			if (v204 == 0) then
																				v205 = 0;
																				v206 = nil;
																				v204 = 1;
																			end
																			if (v204 == 1) then
																				while true do
																					if (v205 == 0) then
																						v206 = v126[2];
																						v124[v206] = v124[v206](v124[v206 + 1 + 0]);
																						break;
																					end
																				end
																				break;
																			end
																		end
																	else
																		local v207 = 0;
																		local v208;
																		while true do
																			if (v207 == 0) then
																				v208 = v126[2];
																				do
																					return v124[v208](v21(v124, v208 + 1, v126[3]));
																				end
																				break;
																			end
																		end
																	end
																elseif (v127 <= 11) then
																	if (v127 > 10) then
																		v124[v126[2]] = v126[3];
																	else
																		v124[v126[2]][v126[3 - 0]] = v126[4];
																	end
																elseif (v127 > 12) then
																	local v213 = 0;
																	local v214;
																	local v215;
																	local v216;
																	local v217;
																	while true do
																		if (v213 == 0) then
																			v214 = 0;
																			v215 = nil;
																			v213 = 1;
																		end
																		if (v213 == 1) then
																			v216 = nil;
																			v217 = nil;
																			v213 = 2;
																		end
																		if (v213 == 2) then
																			while true do
																				if (v214 == 1) then
																					v217 = 0;
																					for v587 = v215, v126[1069 - (68 + 997)] do
																						local v588 = 0;
																						local v589;
																						while true do
																							if (v588 == 0) then
																								v589 = 0;
																								while true do
																									if (v589 == 0) then
																										v217 = v217 + 1;
																										v124[v587] = v216[v217];
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																				if (v214 == 0) then
																					local v542 = 0;
																					while true do
																						if (v542 == 0) then
																							v215 = v126[5 - 3];
																							v216 = {v124[v215](v124[v215 + 1])};
																							v542 = 1;
																						end
																						if (v542 == 1) then
																							v214 = 1;
																							break;
																						end
																					end
																				end
																			end
																			break;
																		end
																	end
																else
																	local v218 = 0;
																	local v219;
																	local v220;
																	local v221;
																	while true do
																		if (v218 == 0) then
																			v219 = v126[2];
																			v220 = {v124[v219](v124[v219 + 1])};
																			v218 = 1;
																		end
																		if (v218 == 1) then
																			v221 = 0;
																			for v502 = v219, v126[4] do
																				local v503 = 0;
																				local v504;
																				while true do
																					if (v503 == 0) then
																						v504 = 0;
																						while true do
																							if (v504 == 0) then
																								v221 = v221 + (1818 - (1703 + 114));
																								v124[v502] = v220[v221];
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			break;
																		end
																	end
																end
															elseif (v127 <= 20) then
																if (v127 <= 16) then
																	if (v127 <= 14) then
																		v124[v126[1272 - (226 + 1044)]] = #v124[v126[3]];
																	elseif (v127 == (65 - 50)) then
																		local v222 = 0;
																		local v223;
																		local v224;
																		while true do
																			if (1 == v222) then
																				for v505 = v223 + 1, v119 do
																					v15(v224, v124[v505]);
																				end
																				break;
																			end
																			if (v222 == 0) then
																				v223 = v126[119 - (32 + 85)];
																				v224 = v124[v223];
																				v222 = 1;
																			end
																		end
																	else
																		local v225 = 0;
																		local v226;
																		local v227;
																		while true do
																			if (v225 == 0) then
																				v226 = 0;
																				v227 = nil;
																				v225 = 1;
																			end
																			if (v225 == 1) then
																				while true do
																					if (v226 == 0) then
																						v227 = v126[2];
																						v124[v227] = v124[v227](v21(v124, v227 + 1, v126[3]));
																						break;
																					end
																				end
																				break;
																			end
																		end
																	end
																elseif (v127 <= 18) then
																	if (v127 == 17) then
																		if (v126[2] == v124[v126[5 - 1]]) then
																			v118 = v118 + 1 + 0;
																		else
																			v118 = v126[3];
																		end
																	else
																		v124[v126[2]] = v126[3] ~= 0;
																	end
																elseif (v127 == 19) then
																	v124[v126[5 - 3]] = v124[v126[3]];
																elseif (v126[2] == v124[v126[1 + 3]]) then
																	v118 = v118 + 1;
																else
																	v118 = v126[3];
																end
															elseif (v127 <= 24) then
																if (v127 <= 22) then
																	if (v127 > 21) then
																		if (v126[959 - (892 + 65)] < v124[v126[4]]) then
																			v118 = v118 + 1;
																		else
																			v118 = v126[3];
																		end
																	else
																		v71[v126[1 + 2]] = v124[v126[4 - 2]];
																	end
																elseif (v127 == 23) then
																	do
																		return;
																	end
																else
																	local v233 = 0;
																	local v234;
																	local v235;
																	while true do
																		if (v233 == 0) then
																			v234 = v126[2];
																			v235 = v124[v126[3]];
																			v233 = 1;
																		end
																		if (v233 == 1) then
																			v124[v234 + 1] = v235;
																			v124[v234] = v235[v124[v126[4]]];
																			break;
																		end
																	end
																end
															elseif (v127 <= 26) then
																if (v127 == 25) then
																	local v236 = 0;
																	local v237;
																	local v238;
																	local v239;
																	local v240;
																	while true do
																		if (v236 == 2) then
																			while true do
																				if (1 == v237) then
																					v240 = v126[3];
																					for v590 = 2 - 1, v240 do
																						v239[v590] = v124[v238 + v590];
																					end
																					break;
																				end
																				if (v237 == 0) then
																					local v546 = 0;
																					while true do
																						if (v546 == 0) then
																							v238 = v126[2];
																							v239 = v124[v238];
																							v546 = 1;
																						end
																						if (v546 == 1) then
																							v237 = 1;
																							break;
																						end
																					end
																				end
																			end
																			break;
																		end
																		if (v236 == 0) then
																			v237 = 0;
																			v238 = nil;
																			v236 = 1;
																		end
																		if (v236 == 1) then
																			v239 = nil;
																			v240 = nil;
																			v236 = 2;
																		end
																	end
																else
																	local v241 = 0;
																	local v242;
																	local v243;
																	local v244;
																	local v245;
																	while true do
																		if (v241 == 2) then
																			while true do
																				if (v242 == 1) then
																					v245 = v124[v243 + 2];
																					if (v245 > 0) then
																						if (v244 > v124[v243 + (1 - 0)]) then
																							v118 = v126[4 - 1];
																						else
																							v124[v243 + 3] = v244;
																						end
																					elseif (v244 < v124[v243 + 1]) then
																						v118 = v126[3];
																					else
																						v124[v243 + 3] = v244;
																					end
																					break;
																				end
																				if (v242 == 0) then
																					local v548 = 0;
																					while true do
																						if (v548 == 0) then
																							v243 = v126[2];
																							v244 = v124[v243];
																							v548 = 1;
																						end
																						if (v548 == 1) then
																							v242 = 1;
																							break;
																						end
																					end
																				end
																			end
																			break;
																		end
																		if (v241 == 0) then
																			v242 = 0;
																			v243 = nil;
																			v241 = 1;
																		end
																		if (v241 == 1) then
																			v244 = nil;
																			v245 = nil;
																			v241 = 2;
																		end
																	end
																end
															elseif (v127 > (41 - (9 + 5))) then
																v124[v126[2]] = v124[v126[3]] % v126[4];
															elseif (v124[v126[2]] ~= v126[4]) then
																v118 = v118 + 1;
															else
																v118 = v126[3];
															end
														elseif (v127 <= (392 - (87 + 263))) then
															if (v127 <= 35) then
																if (v127 <= 31) then
																	if (v127 <= 29) then
																		v124[v126[182 - (67 + 113)]] = v126[3 + 0];
																	elseif (v127 == 30) then
																		v124[v126[2]] = v71[v126[3]];
																	else
																		v124[v126[4 - 2]] = v42(v115[v126[3]], nil, v72);
																	end
																elseif (v127 <= (25 + 8)) then
																	if (v127 > 32) then
																		local v250 = 0;
																		local v251;
																		local v252;
																		local v253;
																		local v254;
																		while true do
																			if (v250 == 2) then
																				while true do
																					if (v251 == 0) then
																						local v549 = 0;
																						while true do
																							if (v549 == 1) then
																								v251 = 1;
																								break;
																							end
																							if (0 == v549) then
																								v252 = v115[v126[3]];
																								v253 = nil;
																								v549 = 1;
																							end
																						end
																					end
																					if (v251 == 1) then
																						local v550 = 0;
																						while true do
																							if (v550 == 1) then
																								v251 = 2;
																								break;
																							end
																							if (v550 == 0) then
																								v254 = {};
																								v253 = v18({}, {[v7("\192\130\56\15\214\177\224", "\159\221\81\97\178\212\152\176")]=function(v667, v668)
																									local v669 = 0;
																									local v670;
																									local v671;
																									while true do
																										if (v669 == 1) then
																											while true do
																												if (v670 == 0) then
																													local v718 = 0;
																													while true do
																														if (v718 == 0) then
																															v671 = v254[v668];
																															return v671[3 - 2][v671[2]];
																														end
																													end
																												end
																											end
																											break;
																										end
																										if (v669 == 0) then
																											v670 = 0;
																											v671 = nil;
																											v669 = 1;
																										end
																									end
																								end,[v7("\37\242\233\24\236\19\195\227\24\227", "\122\173\135\125\155")]=function(v672, v673, v674)
																									local v675 = 0;
																									local v676;
																									local v677;
																									while true do
																										if (v675 == 1) then
																											while true do
																												if (0 == v676) then
																													v677 = v254[v673];
																													v677[1][v677[954 - (802 + 150)]] = v674;
																													break;
																												end
																											end
																											break;
																										end
																										if (0 == v675) then
																											v676 = 0;
																											v677 = nil;
																											v675 = 1;
																										end
																									end
																								end});
																								v550 = 1;
																							end
																						end
																					end
																					if (v251 == 2) then
																						for v593 = 1, v126[4] do
																							local v594 = 0;
																							local v595;
																							while true do
																								if (v594 == 1) then
																									if (v595[1] == 108) then
																										v254[v593 - 1] = {v124,v595[3]};
																									else
																										v254[v593 - (2 - 1)] = {v71,v595[3]};
																									end
																									v123[#v123 + 1] = v254;
																									break;
																								end
																								if (v594 == 0) then
																									v118 = v118 + 1;
																									v595 = v114[v118];
																									v594 = 1;
																								end
																							end
																						end
																						v124[v126[2]] = v42(v252, v253, v72);
																						break;
																					end
																				end
																				break;
																			end
																			if (v250 == 0) then
																				v251 = 0;
																				v252 = nil;
																				v250 = 1;
																			end
																			if (v250 == 1) then
																				v253 = nil;
																				v254 = nil;
																				v250 = 2;
																			end
																		end
																	else
																		local v255 = 0;
																		local v256;
																		local v257;
																		local v258;
																		local v259;
																		local v260;
																		while true do
																			if (v255 == 1) then
																				v258 = nil;
																				v259 = nil;
																				v255 = 2;
																			end
																			if (2 == v255) then
																				v260 = nil;
																				while true do
																					if (v256 == 1) then
																						local v552 = 0;
																						while true do
																							if (v552 == 0) then
																								v119 = (v259 + v257) - 1;
																								v260 = 0;
																								v552 = 1;
																							end
																							if (v552 == 1) then
																								v256 = 2;
																								break;
																							end
																						end
																					end
																					if (v256 == 2) then
																						for v596 = v257, v119 do
																							local v597 = 0;
																							while true do
																								if (v597 == 0) then
																									v260 = v260 + 1;
																									v124[v596] = v258[v260];
																									break;
																								end
																							end
																						end
																						break;
																					end
																					if (v256 == 0) then
																						local v553 = 0;
																						while true do
																							if (v553 == 1) then
																								v256 = 1;
																								break;
																							end
																							if (v553 == 0) then
																								v257 = v126[2];
																								v258, v259 = v117(v124[v257](v21(v124, v257 + 1 + 0, v126[3])));
																								v553 = 1;
																							end
																						end
																					end
																				end
																				break;
																			end
																			if (0 == v255) then
																				v256 = 0;
																				v257 = nil;
																				v255 = 1;
																			end
																		end
																	end
																elseif (v127 > 34) then
																	local v261 = 0;
																	local v262;
																	while true do
																		if (0 == v261) then
																			v262 = v126[2];
																			v124[v262](v124[v262 + 1]);
																			break;
																		end
																	end
																else
																	v124[v126[2]] = v124[v126[3]] % v126[4];
																end
															elseif (v127 <= 38) then
																if (v127 <= 36) then
																	v124[v126[2 + 0]][v124[v126[3]]] = v126[4];
																elseif (v127 > 37) then
																	v124[v126[999 - (915 + 82)]] = v124[v126[3]][v124[v126[11 - 7]]];
																else
																	local v266 = 0;
																	local v267;
																	while true do
																		if (v266 == 0) then
																			v267 = v126[2];
																			do
																				return v124[v267](v21(v124, v267 + 1, v126[3]));
																			end
																			break;
																		end
																	end
																end
															elseif (v127 <= (24 + 16)) then
																if (v127 > 39) then
																	local v268 = 0;
																	local v269;
																	while true do
																		if (v268 == 0) then
																			v269 = v126[2 + 0];
																			v124[v269] = v124[v269]();
																			break;
																		end
																	end
																else
																	local v270 = 0;
																	local v271;
																	while true do
																		if (v270 == 0) then
																			v271 = v126[2 - 0];
																			v124[v271] = v124[v271]();
																			break;
																		end
																	end
																end
															elseif (v127 > 41) then
																local v272 = 0;
																local v273;
																local v274;
																local v275;
																while true do
																	if (v272 == 1) then
																		v275 = v124[v273 + (256 - (163 + 91))];
																		if (v275 > 0) then
																			if (v274 > v124[v273 + 1]) then
																				v118 = v126[3];
																			else
																				v124[v273 + (1190 - (1069 + 118))] = v274;
																			end
																		elseif (v274 < v124[v273 + 1]) then
																			v118 = v126[3];
																		else
																			v124[v273 + 3] = v274;
																		end
																		break;
																	end
																	if (v272 == 0) then
																		v273 = v126[2];
																		v274 = v124[v273];
																		v272 = 1;
																	end
																end
															else
																local v276 = 0;
																local v277;
																local v278;
																while true do
																	if (v276 == 0) then
																		v277 = 0;
																		v278 = nil;
																		v276 = 1;
																	end
																	if (v276 == 1) then
																		while true do
																			if (v277 == 0) then
																				v278 = v126[2];
																				v124[v278](v21(v124, v278 + 1, v126[1 + 2]));
																				break;
																			end
																		end
																		break;
																	end
																end
															end
														elseif (v127 <= 49) then
															if (v127 <= (101 - 56)) then
																if (v127 <= (93 - 50)) then
																	v124[v126[2]] = v72[v126[3]];
																elseif (v127 > 44) then
																	local v279 = 0;
																	local v280;
																	local v281;
																	local v282;
																	local v283;
																	local v284;
																	while true do
																		if (v279 == 2) then
																			v284 = nil;
																			while true do
																				if (v280 == 0) then
																					local v555 = 0;
																					while true do
																						if (0 == v555) then
																							v281 = v126[2];
																							v282, v283 = v117(v124[v281](v21(v124, v281 + (1 - 0), v119)));
																							v555 = 1;
																						end
																						if (v555 == 1) then
																							v280 = 1;
																							break;
																						end
																					end
																				end
																				if (2 == v280) then
																					for v602 = v281, v119 do
																						local v603 = 0;
																						local v604;
																						while true do
																							if (v603 == 0) then
																								v604 = 0;
																								while true do
																									if (v604 == 0) then
																										v284 = v284 + 1;
																										v124[v602] = v282[v284];
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																				if (1 == v280) then
																					local v556 = 0;
																					while true do
																						if (v556 == 1) then
																							v280 = 2;
																							break;
																						end
																						if (v556 == 0) then
																							v119 = (v283 + v281) - 1;
																							v284 = 0;
																							v556 = 1;
																						end
																					end
																				end
																			end
																			break;
																		end
																		if (v279 == 1) then
																			v282 = nil;
																			v283 = nil;
																			v279 = 2;
																		end
																		if (v279 == 0) then
																			v280 = 0;
																			v281 = nil;
																			v279 = 1;
																		end
																	end
																else
																	v124[v126[2]]();
																end
															elseif (v127 <= 47) then
																if (v127 == 46) then
																	local v285 = 0;
																	local v286;
																	local v287;
																	while true do
																		if (v285 == 1) then
																			v124[v286 + 1] = v287;
																			v124[v286] = v287[v126[4]];
																			break;
																		end
																		if (v285 == 0) then
																			v286 = v126[2];
																			v287 = v124[v126[1 + 2]];
																			v285 = 1;
																		end
																	end
																else
																	for v433 = v126[2], v126[3] do
																		v124[v433] = nil;
																	end
																end
															elseif (v127 == 48) then
																v72[v126[3]] = v124[v126[2]];
															else
																local v290 = 0;
																local v291;
																local v292;
																while true do
																	if (1 == v290) then
																		while true do
																			if (v291 == 0) then
																				v292 = v126[1 + 1];
																				v124[v292](v124[v292 + (1 - 0)]);
																				break;
																			end
																		end
																		break;
																	end
																	if (v290 == 0) then
																		v291 = 0;
																		v292 = nil;
																		v290 = 1;
																	end
																end
															end
														elseif (v127 <= 53) then
															if (v127 <= 51) then
																if (v127 == (50 + 0)) then
																	v124[v126[2]] = v126[3] ~= 0;
																elseif v124[v126[2]] then
																	v118 = v118 + (1 - 0);
																else
																	v118 = v126[3];
																end
															elseif (v127 == (49 + 3)) then
																do
																	return v124[v126[2]];
																end
															else
																v124[v126[2]] = #v124[v126[794 - (368 + 423)]];
															end
														elseif (v127 <= (172 - 117)) then
															if (v127 > (72 - (10 + 8))) then
																local v295 = 0;
																local v296;
																while true do
																	if (v295 == 0) then
																		v296 = v126[2];
																		v124[v296](v21(v124, v296 + 1, v119));
																		break;
																	end
																end
															else
																local v297 = 0;
																local v298;
																local v299;
																local v300;
																local v301;
																while true do
																	if (v297 == 1) then
																		v300 = nil;
																		v301 = nil;
																		v297 = 2;
																	end
																	if (v297 == 0) then
																		v298 = 0;
																		v299 = nil;
																		v297 = 1;
																	end
																	if (v297 == 2) then
																		while true do
																			if (v298 == 1) then
																				local v558 = 0;
																				while true do
																					if (v558 == 0) then
																						v301 = v124[v299] + v300;
																						v124[v299] = v301;
																						v558 = 1;
																					end
																					if (v558 == 1) then
																						v298 = 2;
																						break;
																					end
																				end
																			end
																			if (v298 == 2) then
																				if (v300 > (1474 - (1329 + 145))) then
																					if (v301 <= v124[v299 + (972 - (140 + 831))]) then
																						local v682 = 0;
																						local v683;
																						while true do
																							if (v682 == 0) then
																								v683 = 0;
																								while true do
																									if (v683 == 0) then
																										v118 = v126[3];
																										v124[v299 + (1853 - (1409 + 441))] = v301;
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																				elseif (v301 >= v124[v299 + (443 - (416 + 26))]) then
																					local v684 = 0;
																					local v685;
																					while true do
																						if (v684 == 0) then
																							v685 = 0;
																							while true do
																								if (v685 == 0) then
																									v118 = v126[3];
																									v124[v299 + (721 - (15 + 703))] = v301;
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				break;
																			end
																			if (v298 == 0) then
																				local v559 = 0;
																				while true do
																					if (v559 == 0) then
																						v299 = v126[7 - 5];
																						v300 = v124[v299 + 2];
																						v559 = 1;
																					end
																					if (v559 == 1) then
																						v298 = 1;
																						break;
																					end
																				end
																			end
																		end
																		break;
																	end
																end
															end
														elseif (v127 == 56) then
															v118 = v126[3];
														else
															local v303 = 0;
															local v304;
															local v305;
															while true do
																if (v303 == 1) then
																	while true do
																		if (v304 == 0) then
																			v305 = v126[2];
																			v124[v305] = v124[v305](v21(v124, v305 + (3 - 2), v126[3]));
																			break;
																		end
																	end
																	break;
																end
																if (v303 == 0) then
																	v304 = 0;
																	v305 = nil;
																	v303 = 1;
																end
															end
														end
													elseif (v127 <= 86) then
														if (v127 <= 71) then
															if (v127 <= 64) then
																if (v127 <= 60) then
																	if (v127 <= 58) then
																		if (v124[v126[2]] == v126[4]) then
																			v118 = v118 + 1;
																		else
																			v118 = v126[3];
																		end
																	elseif (v127 == 59) then
																		if (v126[1 + 1] < v124[v126[4]]) then
																			v118 = v118 + 1;
																		else
																			v118 = v126[3];
																		end
																	elseif not v124[v126[2]] then
																		v118 = v118 + 1;
																	else
																		v118 = v126[3];
																	end
																elseif (v127 <= 62) then
																	if (v127 > 61) then
																		do
																			return;
																		end
																	else
																		local v307 = 0;
																		local v308;
																		local v309;
																		local v310;
																		while true do
																			if (v307 == 0) then
																				v308 = 0;
																				v309 = nil;
																				v307 = 1;
																			end
																			if (v307 == 1) then
																				v310 = nil;
																				while true do
																					if (v308 == 0) then
																						local v562 = 0;
																						while true do
																							if (v562 == 0) then
																								v309 = v126[1 + 1];
																								v310 = v124[v126[3]];
																								v562 = 1;
																							end
																							if (v562 == 1) then
																								v308 = 1;
																								break;
																							end
																						end
																					end
																					if (v308 == 1) then
																						v124[v309 + 1] = v310;
																						v124[v309] = v310[v126[4]];
																						break;
																					end
																				end
																				break;
																			end
																		end
																	end
																elseif (v127 == 63) then
																	v124[v126[2]][v124[v126[3]]] = v124[v126[4]];
																else
																	v124[v126[2]] = v124[v126[3]] + v126[4];
																end
															elseif (v127 <= 67) then
																if (v127 <= (503 - (262 + 176))) then
																	v124[v126[2]] = {};
																elseif (v127 > 66) then
																	local v314 = 0;
																	local v315;
																	local v316;
																	local v317;
																	while true do
																		if (v314 == 1) then
																			v317 = nil;
																			while true do
																				if (v315 == 1) then
																					v124[v316 + 1] = v317;
																					v124[v316] = v317[v124[v126[4]]];
																					break;
																				end
																				if (v315 == 0) then
																					local v569 = 0;
																					while true do
																						if (1 == v569) then
																							v315 = 1;
																							break;
																						end
																						if (v569 == 0) then
																							v316 = v126[3 - 1];
																							v317 = v124[v126[691 - (198 + 490)]];
																							v569 = 1;
																						end
																					end
																				end
																			end
																			break;
																		end
																		if (v314 == 0) then
																			v315 = 0;
																			v316 = nil;
																			v314 = 1;
																		end
																	end
																else
																	v124[v126[2]] = v126[3] + v124[v126[17 - 13]];
																end
															elseif (v127 <= 69) then
																if (v127 == 68) then
																	v124[v126[2]] = v124[v126[3]] % v124[v126[4]];
																else
																	local v320 = 0;
																	local v321;
																	local v322;
																	local v323;
																	while true do
																		if (v320 == 0) then
																			v321 = 0;
																			v322 = nil;
																			v320 = 1;
																		end
																		if (v320 == 1) then
																			v323 = nil;
																			while true do
																				if (0 == v321) then
																					local v570 = 0;
																					while true do
																						if (1 == v570) then
																							v321 = 1;
																							break;
																						end
																						if (v570 == 0) then
																							v322 = v126[2];
																							v323 = v124[v322];
																							v570 = 1;
																						end
																					end
																				end
																				if (v321 == 1) then
																					for v605 = v322 + 1, v126[441 - (145 + 293)] do
																						v15(v323, v124[v605]);
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																end
															elseif (v127 > 70) then
																v71[v126[3]] = v124[v126[2]];
															else
																local v326 = 0;
																local v327;
																local v328;
																local v329;
																while true do
																	if (1 == v326) then
																		v329 = nil;
																		while true do
																			if (v327 == 0) then
																				local v571 = 0;
																				while true do
																					if (1 == v571) then
																						v327 = 1;
																						break;
																					end
																					if (0 == v571) then
																						v328 = v126[2];
																						v329 = {};
																						v571 = 1;
																					end
																				end
																			end
																			if (v327 == 1) then
																				for v606 = 1, #v123 do
																					local v607 = 0;
																					local v608;
																					local v609;
																					while true do
																						if (v607 == 0) then
																							v608 = 0;
																							v609 = nil;
																							v607 = 1;
																						end
																						if (v607 == 1) then
																							while true do
																								if (v608 == 0) then
																									v609 = v123[v606];
																									for v713 = 0, #v609 do
																										local v714 = 0;
																										local v715;
																										local v716;
																										local v717;
																										while true do
																											if (v714 == 0) then
																												v715 = v609[v713];
																												v716 = v715[1];
																												v714 = 1;
																											end
																											if (v714 == 1) then
																												v717 = v715[2];
																												if ((v716 == v124) and (v717 >= v328)) then
																													local v733 = 0;
																													local v734;
																													while true do
																														if (v733 == 0) then
																															v734 = 0;
																															while true do
																																if (0 == v734) then
																																	v329[v717] = v716[v717];
																																	v715[1] = v329;
																																	break;
																																end
																															end
																															break;
																														end
																													end
																												end
																												break;
																											end
																										end
																									end
																									break;
																								end
																							end
																							break;
																						end
																					end
																				end
																				break;
																			end
																		end
																		break;
																	end
																	if (0 == v326) then
																		v327 = 0;
																		v328 = nil;
																		v326 = 1;
																	end
																end
															end
														elseif (v127 <= 78) then
															if (v127 <= 74) then
																if (v127 <= 72) then
																	local v184 = 0;
																	local v185;
																	local v186;
																	while true do
																		if (v184 == 0) then
																			v185 = 0;
																			v186 = nil;
																			v184 = 1;
																		end
																		if (v184 == 1) then
																			while true do
																				if (0 == v185) then
																					v186 = v126[2];
																					do
																						return v21(v124, v186, v119);
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																elseif (v127 > 73) then
																	if v124[v126[2]] then
																		v118 = v118 + 1;
																	else
																		v118 = v126[6 - 3];
																	end
																else
																	v124[v126[2]] = v126[3] + v124[v126[1210 - (696 + 510)]];
																end
															elseif (v127 <= 76) then
																if (v127 == (157 - 82)) then
																	v124[v126[2]] = v71[v126[1265 - (1091 + 171)]];
																else
																	v124[v126[2]] = v72[v126[3]];
																end
															elseif (v127 > 77) then
																v118 = v126[3];
															else
																v124[v126[2]] = v124[v126[3]][v124[v126[4]]];
															end
														elseif (v127 <= 82) then
															if (v127 <= 80) then
																if (v127 > 79) then
																	local v338 = 0;
																	local v339;
																	local v340;
																	local v341;
																	local v342;
																	while true do
																		if (v338 == 0) then
																			v339 = 0;
																			v340 = nil;
																			v338 = 1;
																		end
																		if (v338 == 1) then
																			v341 = nil;
																			v342 = nil;
																			v338 = 2;
																		end
																		if (v338 == 2) then
																			while true do
																				if (v339 == 0) then
																					local v572 = 0;
																					while true do
																						if (v572 == 0) then
																							v340 = v126[2];
																							v341 = {v124[v340](v21(v124, v340 + 1, v119))};
																							v572 = 1;
																						end
																						if (v572 == 1) then
																							v339 = 1;
																							break;
																						end
																					end
																				end
																				if (v339 == 1) then
																					v342 = 0;
																					for v610 = v340, v126[12 - 8] do
																						local v611 = 0;
																						local v612;
																						while true do
																							if (0 == v611) then
																								v612 = 0;
																								while true do
																									if (v612 == 0) then
																										v342 = v342 + 1;
																										v124[v610] = v341[v342];
																										break;
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																			end
																			break;
																		end
																	end
																else
																	local v343 = 0;
																	local v344;
																	local v345;
																	local v346;
																	local v347;
																	while true do
																		if (v343 == 2) then
																			while true do
																				if (v344 == 1) then
																					local v573 = 0;
																					while true do
																						if (v573 == 0) then
																							v347 = v124[v345] + v346;
																							v124[v345] = v347;
																							v573 = 1;
																						end
																						if (v573 == 1) then
																							v344 = 2;
																							break;
																						end
																					end
																				end
																				if (0 == v344) then
																					local v574 = 0;
																					while true do
																						if (v574 == 0) then
																							v345 = v126[432 - (44 + 386)];
																							v346 = v124[v345 + 2];
																							v574 = 1;
																						end
																						if (v574 == 1) then
																							v344 = 1;
																							break;
																						end
																					end
																				end
																				if (v344 == 2) then
																					if (v346 > (1486 - (998 + 488))) then
																						if (v347 <= v124[v345 + (3 - 2)]) then
																							local v686 = 0;
																							local v687;
																							while true do
																								if (v686 == 0) then
																									v687 = 0;
																									while true do
																										if (v687 == 0) then
																											v118 = v126[3];
																											v124[v345 + 3] = v347;
																											break;
																										end
																									end
																									break;
																								end
																							end
																						end
																					elseif (v347 >= v124[v345 + 1]) then
																						local v688 = 0;
																						while true do
																							if (v688 == 0) then
																								v118 = v126[3];
																								v124[v345 + 3] = v347;
																								break;
																							end
																						end
																					end
																					break;
																				end
																			end
																			break;
																		end
																		if (0 == v343) then
																			v344 = 0;
																			v345 = nil;
																			v343 = 1;
																		end
																		if (v343 == 1) then
																			v346 = nil;
																			v347 = nil;
																			v343 = 2;
																		end
																	end
																end
															elseif (v127 > 81) then
																v124[v126[2]] = v124[v126[3]] - v126[4];
															else
																local v349 = 0;
																local v350;
																local v351;
																while true do
																	if (v349 == 0) then
																		v350 = 0;
																		v351 = nil;
																		v349 = 1;
																	end
																	if (v349 == 1) then
																		while true do
																			if (0 == v350) then
																				v351 = v126[2];
																				v124[v351] = v124[v351](v21(v124, v351 + 1, v119));
																				break;
																			end
																		end
																		break;
																	end
																end
															end
														elseif (v127 <= 84) then
															if (v127 == (457 - (123 + 251))) then
																local v352 = 0;
																local v353;
																while true do
																	if (v352 == 0) then
																		v353 = v126[2];
																		do
																			return v21(v124, v353, v119);
																		end
																		break;
																	end
																end
															else
																v124[v126[2]] = v124[v126[3]] - v126[2 + 2];
															end
														elseif (v127 > (70 + 15)) then
															local v355 = 0;
															local v356;
															local v357;
															local v358;
															local v359;
															while true do
																if (v355 == 2) then
																	for v507 = v356, v119 do
																		local v508 = 0;
																		local v509;
																		while true do
																			if (v508 == 0) then
																				v509 = 0;
																				while true do
																					if (v509 == 0) then
																						v359 = v359 + 1;
																						v124[v507] = v357[v359];
																						break;
																					end
																				end
																				break;
																			end
																		end
																	end
																	break;
																end
																if (v355 == 1) then
																	v119 = (v358 + v356) - 1;
																	v359 = 0;
																	v355 = 2;
																end
																if (v355 == 0) then
																	v356 = v126[700 - (208 + 490)];
																	v357, v358 = v117(v124[v356](v124[v356 + 1]));
																	v355 = 1;
																end
															end
														elseif (v124[v126[2]] ~= v126[4]) then
															v118 = v118 + (773 - (201 + 571));
														else
															v118 = v126[1141 - (116 + 1022)];
														end
													elseif (v127 <= (9 + 91)) then
														if (v127 <= 93) then
															if (v127 <= 89) then
																if (v127 <= (39 + 48)) then
																	v124[v126[2]][v124[v126[3]]] = v126[4];
																elseif (v127 > 88) then
																	local v360 = 0;
																	local v361;
																	local v362;
																	local v363;
																	while true do
																		if (v360 == 2) then
																			for v510 = 1, v126[4] do
																				local v511 = 0;
																				local v512;
																				while true do
																					if (v511 == 0) then
																						v118 = v118 + 1;
																						v512 = v114[v118];
																						v511 = 1;
																					end
																					if (1 == v511) then
																						if (v512[1] == 108) then
																							v363[v510 - (4 - 3)] = {v124,v512[3]};
																						else
																							v363[v510 - 1] = {v71,v512[3]};
																						end
																						v123[#v123 + 1] = v363;
																						break;
																					end
																				end
																			end
																			v124[v126[2]] = v42(v361, v362, v72);
																			break;
																		end
																		if (v360 == 1) then
																			v363 = {};
																			v362 = v18({}, {[v7("\247\187\200\14\189\58\41", "\168\228\161\96\217\95\81")]=function(v513, v514)
																				local v515 = 0;
																				local v516;
																				while true do
																					if (v515 == 0) then
																						v516 = v363[v514];
																						return v516[1][v516[2]];
																					end
																				end
																			end,[v7("\104\228\223\43\75\38\89\223\212\54", "\55\187\177\78\60\79")]=function(v517, v518, v519)
																				local v520 = 0;
																				local v521;
																				while true do
																					if (v520 == 0) then
																						v521 = v363[v518];
																						v521[1][v521[2]] = v519;
																						break;
																					end
																				end
																			end});
																			v360 = 2;
																		end
																		if (v360 == 0) then
																			v361 = v115[v126[3]];
																			v362 = nil;
																			v360 = 1;
																		end
																	end
																elseif not v124[v126[838 - (660 + 176)]] then
																	v118 = v118 + 1;
																else
																	v118 = v126[3];
																end
															elseif (v127 <= (332 - 241)) then
																if (v127 == 90) then
																	v124[v126[2]][v126[3]] = v126[4];
																else
																	local v366 = 0;
																	local v367;
																	local v368;
																	local v369;
																	while true do
																		if (v366 == 0) then
																			v367 = v126[1 + 1];
																			v368 = {v124[v367](v21(v124, v367 + 1, v119))};
																			v366 = 1;
																		end
																		if (v366 == 1) then
																			v369 = 0;
																			for v522 = v367, v126[206 - (14 + 188)] do
																				local v523 = 0;
																				local v524;
																				while true do
																					if (0 == v523) then
																						v524 = 0;
																						while true do
																							if (v524 == 0) then
																								v369 = v369 + 1;
																								v124[v522] = v368[v369];
																								break;
																							end
																						end
																						break;
																					end
																				end
																			end
																			break;
																		end
																	end
																end
															elseif (v127 == 92) then
																local v370 = 0;
																local v371;
																local v372;
																while true do
																	if (v370 == 0) then
																		v371 = 0;
																		v372 = nil;
																		v370 = 1;
																	end
																	if (v370 == 1) then
																		while true do
																			if (v371 == 0) then
																				v372 = v126[2];
																				v124[v372](v21(v124, v372 + (3 - 2), v126[3]));
																				break;
																			end
																		end
																		break;
																	end
																end
															else
																v124[v126[2]] = v124[v126[3]] % v124[v126[679 - (534 + 141)]];
															end
														elseif (v127 <= 96) then
															if (v127 <= 94) then
																if (v124[v126[2]] == v124[v126[4]]) then
																	v118 = v118 + 1;
																else
																	v118 = v126[3];
																end
															elseif (v127 == (39 + 56)) then
																v124[v126[2 + 0]] = v124[v126[3]][v126[4]];
															else
																local v377 = 0;
																local v378;
																local v379;
																while true do
																	if (v377 == 0) then
																		v378 = 0;
																		v379 = nil;
																		v377 = 1;
																	end
																	if (v377 == 1) then
																		while true do
																			if (v378 == 0) then
																				v379 = v126[2];
																				v124[v379] = v124[v379](v124[v379 + 1]);
																				break;
																			end
																		end
																		break;
																	end
																end
															end
														elseif (v127 <= (95 + 3)) then
															if (v127 == 97) then
																v124[v126[2]] = {};
															else
																v124[v126[2]][v126[6 - 3]] = v124[v126[4]];
															end
														elseif (v127 > 99) then
															v124[v126[2]][v126[3]] = v124[v126[4]];
														else
															v124[v126[2]] = v124[v126[3]] + v126[4];
														end
													elseif (v127 <= 107) then
														if (v127 <= 103) then
															if (v127 <= 101) then
																do
																	return v124[v126[2]];
																end
															elseif (v127 == (961 - (814 + 45))) then
																local v386 = 0;
																local v387;
																local v388;
																local v389;
																while true do
																	if (v386 == 1) then
																		v389 = nil;
																		while true do
																			if (0 == v387) then
																				local v580 = 0;
																				while true do
																					if (v580 == 0) then
																						v388 = v126[2 - 0];
																						v389 = v124[v388];
																						v580 = 1;
																					end
																					if (1 == v580) then
																						v387 = 1;
																						break;
																					end
																				end
																			end
																			if (v387 == 1) then
																				for v618 = v388 + 1, v119 do
																					v15(v389, v124[v618]);
																				end
																				break;
																			end
																		end
																		break;
																	end
																	if (v386 == 0) then
																		v387 = 0;
																		v388 = nil;
																		v386 = 1;
																	end
																end
															else
																local v390 = 0;
																local v391;
																local v392;
																local v393;
																local v394;
																local v395;
																while true do
																	if (v390 == 0) then
																		v391 = 0;
																		v392 = nil;
																		v390 = 1;
																	end
																	if (v390 == 2) then
																		v395 = nil;
																		while true do
																			if (v391 == 0) then
																				local v581 = 0;
																				while true do
																					if (v581 == 1) then
																						v391 = 1;
																						break;
																					end
																					if (0 == v581) then
																						v392 = v126[2];
																						v393, v394 = v117(v124[v392](v21(v124, v392 + 1, v126[3])));
																						v581 = 1;
																					end
																				end
																			end
																			if (v391 == 1) then
																				local v582 = 0;
																				while true do
																					if (v582 == 0) then
																						v119 = (v394 + v392) - 1;
																						v395 = 0;
																						v582 = 1;
																					end
																					if (v582 == 1) then
																						v391 = 2;
																						break;
																					end
																				end
																			end
																			if (v391 == 2) then
																				for v619 = v392, v119 do
																					local v620 = 0;
																					while true do
																						if (v620 == 0) then
																							v395 = v395 + 1;
																							v124[v619] = v393[v395];
																							break;
																						end
																					end
																				end
																				break;
																			end
																		end
																		break;
																	end
																	if (v390 == 1) then
																		v393 = nil;
																		v394 = nil;
																		v390 = 2;
																	end
																end
															end
														elseif (v127 <= 105) then
															if (v127 == 104) then
																local v396 = 0;
																local v397;
																local v398;
																local v399;
																local v400;
																local v401;
																while true do
																	if (v396 == 3) then
																		if v401 then
																			local v539 = 0;
																			while true do
																				if (v539 == 0) then
																					v124[v399] = v401;
																					v118 = v126[3];
																					break;
																				end
																			end
																		else
																			v118 = v118 + 1;
																		end
																		break;
																	end
																	if (v396 == 1) then
																		v399 = v397 + 2;
																		v400 = {v124[v397](v124[v397 + (2 - 1)], v124[v399])};
																		v396 = 2;
																	end
																	if (v396 == 2) then
																		for v525 = 1 + 0, v398 do
																			v124[v399 + v525] = v400[v525];
																		end
																		v401 = v400[1];
																		v396 = 3;
																	end
																	if (v396 == 0) then
																		v397 = v126[2];
																		v398 = v126[9 - 5];
																		v396 = 1;
																	end
																end
															else
																v124[v126[1 + 1]][v124[v126[3]]] = v124[v126[4]];
															end
														elseif (v127 > (57 + 49)) then
															local v404 = 0;
															local v405;
															while true do
																if (v404 == 0) then
																	v405 = v126[2];
																	v124[v405](v21(v124, v405 + 1, v119));
																	break;
																end
															end
														else
															local v406 = 0;
															local v407;
															local v408;
															while true do
																if (v406 == 0) then
																	v407 = v126[3];
																	v408 = v124[v407];
																	v406 = 1;
																end
																if (v406 == 1) then
																	for v528 = v407 + 1, v126[4] do
																		v408 = v408 .. v124[v528];
																	end
																	v124[v126[2]] = v408;
																	break;
																end
															end
														end
													elseif (v127 <= 111) then
														if (v127 <= 109) then
															if (v127 == 108) then
																v124[v126[2]] = v124[v126[3]];
															else
																local v411 = 0;
																local v412;
																local v413;
																local v414;
																while true do
																	if (v411 == 1) then
																		v414 = v126[3];
																		for v529 = 1, v414 do
																			v413[v529] = v124[v412 + v529];
																		end
																		break;
																	end
																	if (v411 == 0) then
																		v412 = v126[2];
																		v413 = v124[v412];
																		v411 = 1;
																	end
																end
															end
														elseif (v127 > 110) then
															if (v124[v126[2]] == v124[v126[3 + 1]]) then
																v118 = v118 + 1;
															else
																v118 = v126[3];
															end
														else
															v124[v126[2]]();
														end
													elseif (v127 <= 113) then
														if (v127 == (997 - (261 + 624))) then
															local v415 = 0;
															local v416;
															local v417;
															local v418;
															while true do
																if (v415 == 1) then
																	v418 = nil;
																	while true do
																		if (v416 == 1) then
																			for v621 = v417 + 1, v126[4] do
																				v418 = v418 .. v124[v621];
																			end
																			v124[v126[2]] = v418;
																			break;
																		end
																		if (v416 == 0) then
																			local v584 = 0;
																			while true do
																				if (v584 == 1) then
																					v416 = 1;
																					break;
																				end
																				if (v584 == 0) then
																					v417 = v126[3];
																					v418 = v124[v417];
																					v584 = 1;
																				end
																			end
																		end
																	end
																	break;
																end
																if (v415 == 0) then
																	v416 = 0;
																	v417 = nil;
																	v415 = 1;
																end
															end
														else
															local v419 = 0;
															local v420;
															local v421;
															while true do
																if (v419 == 1) then
																	while true do
																		if (v420 == 0) then
																			v421 = v126[2];
																			v124[v421] = v124[v421](v21(v124, v421 + 1, v119));
																			break;
																		end
																	end
																	break;
																end
																if (v419 == 0) then
																	v420 = 0;
																	v421 = nil;
																	v419 = 1;
																end
															end
														end
													elseif (v127 == 114) then
														local v422 = 0;
														local v423;
														local v424;
														local v425;
														local v426;
														while true do
															if (v422 == 2) then
																for v532 = v423, v119 do
																	local v533 = 0;
																	while true do
																		if (v533 == 0) then
																			v426 = v426 + 1;
																			v124[v532] = v424[v426];
																			break;
																		end
																	end
																end
																break;
															end
															if (v422 == 0) then
																v423 = v126[2];
																v424, v425 = v117(v124[v423](v21(v124, v423 + (397 - (115 + 281)), v119)));
																v422 = 1;
															end
															if (v422 == 1) then
																v119 = (v425 + v423) - 1;
																v426 = 0;
																v422 = 2;
															end
														end
													else
														local v427 = 0;
														local v428;
														local v429;
														while true do
															if (v427 == 0) then
																v428 = v126[2];
																v429 = {};
																v427 = 1;
															end
															if (v427 == 1) then
																for v534 = 1, #v123 do
																	local v535 = 0;
																	local v536;
																	local v537;
																	while true do
																		if (1 == v535) then
																			while true do
																				if (0 == v536) then
																					v537 = v123[v534];
																					for v696 = 0, #v537 do
																						local v697 = 0;
																						local v698;
																						local v699;
																						local v700;
																						local v701;
																						while true do
																							if (v697 == 1) then
																								v700 = nil;
																								v701 = nil;
																								v697 = 2;
																							end
																							if (v697 == 0) then
																								v698 = 0;
																								v699 = nil;
																								v697 = 1;
																							end
																							if (v697 == 2) then
																								while true do
																									if (v698 == 1) then
																										v701 = v699[2];
																										if ((v700 == v124) and (v701 >= v428)) then
																											local v735 = 0;
																											local v736;
																											while true do
																												if (v735 == 0) then
																													v736 = 0;
																													while true do
																														if (0 == v736) then
																															v429[v701] = v700[v701];
																															v699[1] = v429;
																															break;
																														end
																													end
																													break;
																												end
																											end
																										end
																										break;
																									end
																									if (v698 == 0) then
																										local v731 = 0;
																										while true do
																											if (v731 == 0) then
																												v699 = v537[v696];
																												v700 = v699[1];
																												v731 = 1;
																											end
																											if (1 == v731) then
																												v698 = 1;
																												break;
																											end
																										end
																									end
																								end
																								break;
																							end
																						end
																					end
																					break;
																				end
																			end
																			break;
																		end
																		if (v535 == 0) then
																			v536 = 0;
																			v537 = nil;
																			v535 = 1;
																		end
																	end
																end
																break;
															end
														end
													end
													v118 = v118 + 1;
													break;
												end
											end
										end
										break;
									end
								end
							end;
						end
						if (v73 == 0) then
							v74 = v70[1];
							v75 = v70[2];
							v73 = 1;
						end
					end
				end
				return v42(v41(), {}, v29)(...);
			end
			if (2 == v30) then
				function v35()
					local v77 = 0;
					local v78;
					local v79;
					while true do
						if (v77 == 1) then
							return (v79 * 256) + v78;
						end
						if (0 == v77) then
							v78, v79 = v9(v28, v31, v31 + 2);
							v31 = v31 + 2;
							v77 = 1;
						end
					end
				end
				v36 = nil;
				function v36()
					local v80 = 0;
					local v81;
					local v82;
					local v83;
					local v84;
					while true do
						if (v80 == 1) then
							return (v84 * 16777216) + (v83 * 65536) + (v82 * 256) + v81;
						end
						if (v80 == 0) then
							v81, v82, v83, v84 = v9(v28, v31, v31 + 3);
							v31 = v31 + (12 - 8);
							v80 = 1;
						end
					end
				end
				v37 = nil;
				v30 = 3;
			end
			if (v30 == 0) then
				v31 = 1;
				v32 = nil;
				v28 = v12(v11(v28, 8 - 3), v7("\92\110", "\114\64\88\28"), function(v85)
					if (v9(v85, 2) == 79) then
						local v92 = 0;
						while true do
							if (v92 == 0) then
								v32 = v8(v11(v85, 1, 1));
								return "";
							end
						end
					else
						local v93 = 0;
						local v94;
						local v95;
						while true do
							if (v93 == 0) then
								v94 = 0;
								v95 = nil;
								v93 = 1;
							end
							if (v93 == 1) then
								while true do
									if (0 == v94) then
										v95 = v10(v8(v85, 16));
										if v32 then
											local v145 = 0;
											local v146;
											while true do
												if (v145 == 0) then
													v146 = v13(v95, v32);
													v32 = nil;
													v145 = 1;
												end
												if (v145 == 1) then
													return v146;
												end
											end
										else
											return v95;
										end
										break;
									end
								end
								break;
							end
						end
					end
				end);
				v33 = nil;
				v30 = 1;
			end
		end
	end
	vv17(), ...);
end
